package com.backend.infocare.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PriorityAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPriorityAllPropertiesEquals(Priority expected, Priority actual) {
        assertPriorityAutoGeneratedPropertiesEquals(expected, actual);
        assertPriorityAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPriorityAllUpdatablePropertiesEquals(Priority expected, Priority actual) {
        assertPriorityUpdatableFieldsEquals(expected, actual);
        assertPriorityUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPriorityAutoGeneratedPropertiesEquals(Priority expected, Priority actual) {
        assertThat(expected)
            .as("Verify Priority auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPriorityUpdatableFieldsEquals(Priority expected, Priority actual) {
        assertThat(expected)
            .as("Verify Priority relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getColorCode()).as("check colorCode").isEqualTo(actual.getColorCode()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPriorityUpdatableRelationshipsEquals(Priority expected, Priority actual) {}
}
