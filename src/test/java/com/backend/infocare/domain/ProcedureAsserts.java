package com.backend.infocare.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProcedureAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProcedureAllPropertiesEquals(Procedure expected, Procedure actual) {
        assertProcedureAutoGeneratedPropertiesEquals(expected, actual);
        assertProcedureAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProcedureAllUpdatablePropertiesEquals(Procedure expected, Procedure actual) {
        assertProcedureUpdatableFieldsEquals(expected, actual);
        assertProcedureUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProcedureAutoGeneratedPropertiesEquals(Procedure expected, Procedure actual) {
        assertThat(expected)
            .as("Verify Procedure auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProcedureUpdatableFieldsEquals(Procedure expected, Procedure actual) {
        assertThat(expected)
            .as("Verify Procedure relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getCategory()).as("check category").isEqualTo(actual.getCategory()))
            .satisfies(e -> assertThat(e.getProcedureId()).as("check procedureId").isEqualTo(actual.getProcedureId()))
            .satisfies(e -> assertThat(e.getStepByStepGuide()).as("check stepByStepGuide").isEqualTo(actual.getStepByStepGuide()))
            .satisfies(e -> assertThat(e.getEstimatedTime()).as("check estimatedTime").isEqualTo(actual.getEstimatedTime()))
            .satisfies(e -> assertThat(e.getRequiredTools()).as("check requiredTools").isEqualTo(actual.getRequiredTools()))
            .satisfies(e -> assertThat(e.getSkillsRequired()).as("check skillsRequired").isEqualTo(actual.getSkillsRequired()))
            .satisfies(e -> assertThat(e.getSafetyInstructions()).as("check safetyInstructions").isEqualTo(actual.getSafetyInstructions()))
            .satisfies(e -> assertThat(e.getLastReviewed()).as("check lastReviewed").isEqualTo(actual.getLastReviewed()))
            .satisfies(e -> assertThat(e.getReviewedBy()).as("check reviewedBy").isEqualTo(actual.getReviewedBy()))
            .satisfies(e -> assertThat(e.getAttachments()).as("check attachments").isEqualTo(actual.getAttachments()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProcedureUpdatableRelationshipsEquals(Procedure expected, Procedure actual) {}
}
